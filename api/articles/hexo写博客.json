{"title":"hexo搭建博客","slug":"hexo写博客","date":"2019-11-05T12:28:27.000Z","updated":"2019-11-07T01:24:39.665Z","comments":true,"path":"api/articles/hexo写博客.json","photos":[],"link":"","excerpt":"Hexo 的环境配置一、安装 Node.js登录网址为 https://nodejs.org/en/download/； 找到 Download 板块。 根据本机类型，选择相应的版本下载；注：如何确定自己电脑的类型呢？解决办法：计算机-&gt;右键-&gt;属性，看到下图可知本机架构。 安装下载的 node文件，一路 next，即可完成安装。<br>注：nodejs 默认的安装中会包含环境变量的配置和 npm 工具的安装。 检验是否安装成功：在“开始”菜单中输入cmd，打开命令行窗口<br>（1） 输入 node  –v，若显示版本号，则 nodejs 安装成功；<br>（2） 输入 npm  -v，若显示版本号，则 npm 安装成功；<br>  [Figure] 至此，Hexo 的环境配置已经全部完成。 ","covers":["/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/3.png","/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/4.png","/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/6.png","/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/21.png","/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/22.png","/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/23.png"],"content":"<h2 id=\"Hexo-的环境配置\"><a href=\"#Hexo-的环境配置\" class=\"headerlink\" title=\"Hexo 的环境配置\"></a>Hexo 的环境配置</h2><h4 id=\"一、安装-Node-js\"><a href=\"#一、安装-Node-js\" class=\"headerlink\" title=\"一、安装 Node.js\"></a>一、安装 Node.js</h4><ol>\n<li><p>登录网址为 <a href=\"https://nodejs.org/en/download/；\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/en/download/；</a> 找到 <strong>Download</strong> 板块。 </p>\n</li>\n<li><p>根据本机类型，选择相应的版本下载；</p>\n<p>注：如何确定自己电脑的类型呢？解决办法：计算机-&gt;右键-&gt;属性，看到下图可知本机架构。 </p>\n</li>\n<li><p>安装下载的 node文件，一路 next，即可完成安装。<br>注：nodejs 默认的安装中会包含环境变量的配置和 npm 工具的安装。 </p>\n</li>\n<li><p>检验是否安装成功：在“开始”菜单中输入<strong>cmd</strong>，打开命令行窗口<br>（1） 输入 <strong>node  –v</strong>，若显示版本号，则 nodejs 安装成功；<br>（2） 输入 <strong>npm  -v</strong>，若显示版本号，则 npm 安装成功；<br> <img src=\"/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/3.png\" alt=\"检验\"></p>\n</li>\n<li><p>至此，Hexo 的环境配置已经全部完成。 </p>\n</li>\n</ol>\n<a id=\"more\"></a>\n\n<h4 id=\"二、Hexo-的安装\"><a href=\"#二、Hexo-的安装\" class=\"headerlink\" title=\"二、Hexo 的安装\"></a>二、Hexo 的安装</h4><ol>\n<li>使用 npm 命令安装 Hexo 客户端，输入：*<em>npm install -g hexo-cli *</em><br><img src=\"/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/4.png\" alt=\"\"><br>成功安装了 Hexo 客户端，且版本号为 2.0.0.</li>\n<li>确定自己博客的文件夹在本机位置 可以在<em>D 盘新建一个 blog 的文件夹</em>，然后将命令行切换到这个目录下 </li>\n<li>将该文件夹初始化为 hexo 网页框架所在位置，输入 <strong>hexo init</strong><br><img src=\"/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/6.png\" alt=\"tu\"><br>命令执行失败，因为它需要从 github 上下载程序，因此我们首先<em>需要下载 Git 工 具</em>。</li>\n<li>登录 git 的 windows 版本下载页面：<a href=\"https://git-scm.com/download/win。\" target=\"_blank\" rel=\"noopener\">https://git-scm.com/download/win。</a> 根据自己 系统类型，选择性安装。</li>\n<li>检测 git 工具是否安装成功：在新打开的 cmd 窗口输入<strong>git</strong>指令<br>![tu](/hexo搭建博客/10 (1).png)</li>\n<li>切换到博客文件夹路径下面后，重新输入 hexo init，若出现 <strong>Start blogging with Hexo!</strong> 表明 blog 初始化 成功。 </li>\n<li>生成 public 静态资源:输入<strong>hexo g</strong>       注：g=generate  </li>\n<li>启动本地服务器:输入 <strong>hexo s</strong>注：s=server </li>\n<li>检查网站雏形：在浏览器输入 <a href=\"http://localhost:4000\" target=\"_blank\" rel=\"noopener\">http://localhost:4000</a>   ，即可查看通过 hexo 部署的 <em>本地静态网页效果</em>。或者点击此处 <a href=\"http://localhost:4000\" target=\"_blank\" rel=\"noopener\">本地测试</a></li>\n</ol>\n<h4 id=\"三、开写第一篇博客文章\"><a href=\"#三、开写第一篇博客文章\" class=\"headerlink\" title=\"三、开写第一篇博客文章\"></a>三、开写第一篇博客文章</h4><ol>\n<li>上述网站中出现的 Hello World 文章其实在<em>blog\\source_posts</em> 文件目录下默认创建 的，因此我们可以直接在该文件目录下创建自己的博客内容。</li>\n<li>新建第一篇博客文件。在 blog 文件下使用命令：<strong>hexo new</strong> 文件名。这样 hexo 就 会帮我们在 blog\\source_posts 下自动生成制定名称的文件,<em>后缀名为.md</em>。用这个命令的好 处是帮我们自动生成了时间。 </li>\n<li>打开、撰写、保存新文件： 可以使用 txt 操作，打开文件后输入以下内容：     hello 你好啊，并以 UTF-8 格式来保存。 </li>\n</ol>\n<h2 id=\"二-搭建-Github-网页仓库\"><a href=\"#二-搭建-Github-网页仓库\" class=\"headerlink\" title=\"二 搭建 Github 网页仓库\"></a>二 搭建 Github 网页仓库</h2><ol>\n<li><p>创建一个新的仓库：登录官网后，点击 标签后输入用户名、密码。然后创 建一个新的仓库。注意，下图两个红色覆盖区域的名称要相同。最后点击“create repository” </p>\n<p><img src=\"/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/21.png\" alt=\"tu\"></p>\n</li>\n<li><p>完成后，可以点击该仓库，进入仓库的配置界面 </p>\n<p><img src=\"/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/22.png\" alt=\"tu\"></p>\n<p>   鼠标拖动纵向进度条到中央位置，发现如下消息： </p>\n</li>\n</ol>\n<p><img src=\"/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/23.png\" alt=\"\"></p>\n<p>这时表明，我们新建的仓库被发布在了上述这个网页上。 </p>\n<h2 id=\"三-关联-Github-网页仓库和本地-Hexo-博客\"><a href=\"#三-关联-Github-网页仓库和本地-Hexo-博客\" class=\"headerlink\" title=\"三 关联 Github 网页仓库和本地 Hexo 博客\"></a>三 关联 Github 网页仓库和本地 Hexo 博客</h2><h4 id=\"一、配置-SSH-key（这个操作似乎只能在-git-bash-中完成）\"><a href=\"#一、配置-SSH-key（这个操作似乎只能在-git-bash-中完成）\" class=\"headerlink\" title=\"一、配置 SSH key（这个操作似乎只能在 git bash 中完成）\"></a>一、配置 SSH key（这个操作似乎只能在 git bash 中完成）</h4><p>提交代码肯定要拥有你的 github 权限才可以，但是直接 使用用户名和密码太不安全了，所以我们使用 ssh key 来解决本地和服务器的连接问题。 </p>\n<ol>\n<li><p>创建 ssh key: 第一条指令是查看本机中是否存在 ssh key；如果存在就可以直接使 用；若不存在，则需要先生成。第二条指令就是用来生成 ssh key,输入：输入 *<em>ssh-keygen -t rsa -C “github 邮箱名称” *</em><br><img src=\"\" alt=\"\"><br>然后连续 3 次回车，最终会生成一个文件在用户目录下，打开用户目录，找 到.ssh\\id_rsa.pub 文件，记事本打开并复制里面的内容，打开你的 github 主页，进入个人设 置 -&gt; SSH and GPG keys -&gt; New SSH key,将复制的内容粘贴至其中。 </p>\n</li>\n<li><p>测试本机是否可以通过 ssh 连接到自己的 github 仓库。输入：<br>ssh -T <a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a>             # 注意邮箱地址不用改<br>然后输入 yes </p>\n</li>\n<li><p>修改 blog_config.yml 文件，将最后一部分修改为如下内容<br><strong>deploy:</strong><br><strong>type:  git</strong><br><strong>repo:  <a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a>:用户名/用户名.github.io.git     branch:  master</strong></p>\n</li>\n<li><p>安装一个用于关联 hexo 和 git 的小插件： <strong>npm install hexo-deployer-git –save</strong></p>\n</li>\n<li><p>将 hexo 部署至自己的 github 仓库上：输入 <strong>hexo d</strong>指令    注：d-deoly。 </p>\n</li>\n<li><p>在浏览器中输入我们的仓库地址，发现网页更新为本地的静态网页，同时仓库中多 了很多文件。但这时候发现只有我们的第一篇默认的 hello world 博文！因为我们新建的那 篇 helloccit 文件没有使用命令生成静态资源！</p>\n</li>\n<li><p>最后输入 </p>\n<p>(1)  <strong>hexo  g</strong></p>\n<p>(2)  <strong>hexo  d</strong></p>\n</li>\n</ol>\n","categories":[],"tags":[]}